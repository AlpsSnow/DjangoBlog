"""
Django settings for DjangoBlog project.

Generated by 'django-admin startproject' using Django 2.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'd$tic(mqo9l$)3^h433vuf!cgggl+9*mjh_+(qd*km*%g^ajyp'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'blog.apps.BlogConfig',                      #把blog应用加入到项目应用列表中，对应blog/apps/BlogConfig
    'users.apps.UsersConfig',                    #把users应用加入到项目应用中  (注意：为了使信号量有效必须写成"xxx.apps.xxxConfig)
    'crispy_forms',                              #第三方form验证插件包
    'markdown_deux',                             #为了在项目中支持Markdown语法，使用第三方包django-markdown_deux
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'DjangoBlog.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],                  #设置templates的路径:%Base_DIR%/templates
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'blog.context_processors.sidebar',  #为所有模板文件添加上下文渲染器
            ],
        },
    },
]

WSGI_APPLICATION = 'DjangoBlog.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        #'ENGINE': 'django.db.backends.sqlite3',         #sqlite3的配置
        #'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),   #sqlite3的配置
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'djangoblog',
        'USER': 'root',
        'PASSWORD': '',
        'HOST': 'localhost',
        'PORT': '3306',        
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'zh-hans'       #设置语言

TIME_ZONE = 'Asia/Shanghai'     #设置时区

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'

#STATICFILES_DIRS告诉django,首先到STATICFILES_DIRS里面寻找静态文件,其次再到各个app的static文件夹里面找
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, "static"), # BASE_DIR指project的路径，即DjangoBlog目录的路径
)

# 部署的时候才发挥作用,通过manage.py collectstatic可以把所有static文件统一收集到collected_static下
STATIC_ROOT = os.path.join(BASE_DIR, "collected_static") 

# 处于性能考虑我们将媒体文件存储在文件系统中，而不是数据库中。
# 1.上传图像的位置将位于文件系统上
#  1.1 models中希望将图像上传到名为‘profile_pics’目录中
#  1.2 上传图片后，将会在媒体目录（media）内创建一个profile_pics目录，将图片放入，该媒体目录位于项目根目录
# 2. 媒体URL是我们在浏览器中访问图形的方式

# 媒体目录 : 媒体在文件系统中路径，项目根目录下的media文件夹
MEDIA_ROOT= os.path.join(BASE_DIR,'media')

# 媒体URL：是媒体目录的公共URL，就是我们通过浏览器访问媒体的URL
MEDIA_URL='/media/'

# 设置crispy使用bootstrap3的css框架
CRISPY_TEMPLATE_PACK = 'bootstrap3'

# 设置login成功后想要重定向的URL
LOGIN_REDIRECT_URL='blog:index'

# 设置login的URL，（设置@login_required的重定向URL）
LOGIN_URL = 'login'
